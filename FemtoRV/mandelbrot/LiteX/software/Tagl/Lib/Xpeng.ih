/*
 * This software is copyrighted as noted below.  It may be freely copied,
 * modified, and redistributed, provided that the copyright notice is
 * preserved on all copies.
 *
 * There is no warranty or other guarantee of fitness for this software,
 * it is provided solely "as is".  Bug reports or fixes may be sent
 * to the author, who may or may not act on them as he desires.
 *
 * You may not include this software in a program or other software product
 * without supplying the source, or without informing the end-user that the
 * source is available for no extra charge.
 *
 * If you modify this software, you should include a notice giving the
 * name of the person performing the modification, the date of modification,
 * and the reason for such modification.
 *
 * Author:      Bruno Levy
 *
 * Copyright (c) 1996, Bruno Levy.
 *
 */
/*
 *
 * Xpeng.ih
 * 
 * A polygon engine that works with X.
 * Must be initialized from an XGraphicPort.
 * Usefull for remote displays when ZBuffer and Gouraud are
 * not needed.
 *
 */


#ifndef XPENG_I_H
#define XPENG_I_H

inline Drawable  
XPolygonEngine::GetDrawable()
{
  return _static_gport->Cntl(XGraphicPort::GETXDRAWABLE);
}


inline int       
XPolygonEngine::RGB2Gray(ColorComponent r, 
		         ColorComponent g, 
			 ColorComponent b)
{
  return ((int)(0.5 * (float)r + 0.3 * (float)g + 0.2 * (float)b)) >> 5;
}

inline void 
XPolygonEngine::SetColor(ColorIndex idx)
{
  if(_bw) 
    {
       ColorComponent r,g,b;
       int dith;

       _static_gport->Colortable()[idx].Get(&r,&g,&b);
       dith = RGB2Gray(r,g,b);

	_gc = _stipple_gc[dith];
    }	 
  else
    XSetForeground(_display, _gc, _static_gport->TrueColormap()[idx]);
}

inline void  
XPolygonEngine::SetColor(ColorComponent r, ColorComponent g, ColorComponent b)
{
  if(_bw)
     {
       int dith;

       dith = RGB2Gray(r,g,b);

	_gc = _stipple_gc[dith];

     }
  else
     XSetForeground(_display, _gc, _static_gport->TrueColormap()[_static_gport->RGB2ColorCode(r,g,b)]);
}

inline void
XPolygonEngine::SetColor(GVertexAttributes *attr)
{
  if(_static_attributes->Get(GA_RGB))
     SetColor(attr->r, attr->g, attr->b);
  else
     SetColor((ColorIndex)(attr->c >> D_SHIFT));
}


#endif
