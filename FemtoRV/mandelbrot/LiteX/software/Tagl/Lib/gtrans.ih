/*
 * This software is copyrighted as noted below.  It may be freely copied,
 * modified, and redistributed, provided that the copyright notice is
 * preserved on all copies.
 *
 * There is no warranty or other guarantee of fitness for this software,
 * it is provided solely "as is".  Bug reports or fixes may be sent
 * to the author, who may or may not act on them as he desires.
 *
 * You may not include this software in a program or other software product
 * without supplying the source, or without informing the end-user that the
 * source is available for no extra charge.
 *
 * If you modify this software, you should include a notice giving the
 * name of the person performing the modification, the date of modification,
 * and the reason for such modification.
 *
 * Author:      Bruno Levy
 *
 * Copyright (c) 1996, Bruno Levy.
 *
 */
/*
 *
 * gtrans.ih
 *
 */

#ifndef GTRANS_I_H
#define GTRANS_I_H


inline void 
GMatrix::Translate(gfloat x, gfloat y, gfloat z)
{
  int i;

  for(i=0; i<4; i++)
     {
     _x[3][i].mac(_x[0][i],x);
     _x[3][i].mac(_x[1][i],y);
     _x[3][i].mac(_x[2][i],z);
     }
}


inline void
GMatrix::Rotate(gAngle r, char axis)
{
  GCoeff sr,cr;
  GCoeff tmp;
  int i;

  sr.sin(r);
  cr.cos(r);

  switch(axis)
    {
     case 'x':
     case 'X':

     for(i=0; i<4; i++)
       {
       tmp = _x[1][i];
       _x[1][i].mld(tmp,cr);
       _x[1][i].mac(_x[2][i],sr);
       _x[2][i].mld(_x[2][i],cr);
       _x[2][i].msb(tmp,sr);
       }

     break;


     case 'y':
     case 'Y':

     for(i=0; i<4; i++)
       {
       tmp = _x[0][i];
       _x[0][i].mld(tmp,cr);
       _x[0][i].mac(_x[2][i],sr);
       _x[2][i].mld(_x[2][i],cr);
       _x[2][i].msb(tmp,sr);
       }

     break;


     case 'z':
     case 'Z':

     for(i=0; i<4; i++)
       {
       tmp = _x[0][i];
       _x[0][i].mld(tmp,cr);
       _x[0][i].mac(_x[1][i],sr);
       _x[1][i].mld(_x[1][i],cr);
       _x[1][i].msb(tmp,sr);
       }

     break;

    }
}

inline void 
GMatrix::Scale(gfloat sx, gfloat sy, gfloat sz)
{
  int i;
  for(i=0; i<4; i++)
     {
     _x[0][i].mul(sx);
     _x[1][i].mul(sy);
     _x[2][i].mul(sz);
     }
}

#endif


