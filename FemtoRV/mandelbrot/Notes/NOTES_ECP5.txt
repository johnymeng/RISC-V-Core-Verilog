
ECP5 notes:
  To understand:
     - how to program the board in such a way that our program decomes
       the default program ? (for now, if we plug the board, it
       reactivates the default "knight driver" program)
     - Can we drive the leds with LVCMOS33 instead of LVCMOS25 ? (I do
       not dare...) --> Yes, it works, no problem.
       
  Examples in prjtrellis:
     ecp5_evn: the 'hello world' blinker example is here !
     soc_ecp5_evn: attoSOC + picoRV32

  Balls: (specified in .lpf file)
  
     For the ECP5 evaluation board:
        LVCMOS25 = 2.5V
	LVCMOS33 = 3.3V
  
  12 MHz Clock: (note: JP2 needs to be set, which was the default config. on my board)
     LOCATE COMP "clkin" SITE "A10";
     IOBUF PORT "clkin" IO_TYPE=LVCMOS33;
    
  LEDs:  
     LOCATE COMP "led[0]" SITE "B17";
     LOCATE COMP "led[1]" SITE "A17";
     LOCATE COMP "led[2]" SITE "C17";
     LOCATE COMP "led[3]" SITE "B18";
     LOCATE COMP "led[4]" SITE "A18";
     LOCATE COMP "led[5]" SITE "B19";
     LOCATE COMP "led[6]" SITE "A12";
     LOCATE COMP "led[7]" SITE "A13";

     IOBUF PORT "led[0]" IO_TYPE=LVCMOS25;
     IOBUF PORT "led[1]" IO_TYPE=LVCMOS25;
     IOBUF PORT "led[2]" IO_TYPE=LVCMOS25;
     IOBUF PORT "led[3]" IO_TYPE=LVCMOS25;
     IOBUF PORT "led[4]" IO_TYPE=LVCMOS25;
     IOBUF PORT "led[5]" IO_TYPE=LVCMOS25;
     IOBUF PORT "led[6]" IO_TYPE=LVCMOS25;
     IOBUF PORT "led[7]" IO_TYPE=LVCMOS25;

     Rem: can we set them to LVCMOS33 ? (because we cannot have
     LVCMOS25 and LVCMOS33 on the same "port", which prevents from
     having both LEDS and other balls activated (but I do not know
     which balls belong to the same port).
     After examining the schematics, seeing the resistor, there is
     no risk -> tryed and works like a charm. More comfortable, then
     I'll be able to install my OLED display on the J39 connector.


   Buttons:
      * SW2 -> "G2" (meant to be used as global set/reset, active low)
          Did not manage to use this one for now
      * SW3 -> "W3" (used to trigger config. process, probably can't be reused)
      * SW4 -> "P4" user button, active low
          For now, I'm using this one for reset (the bottom one on the board)

   UART: 
     LOCATE COMP "uart_tx" SITE "P3";
     LOCATE COMP "uart_rx" SITE "P2";

     IOBUF PORT "uart_tx" IO_TYPE=LVCMOS33;
     IOBUF PORT "uart_rx" IO_TYPE=LVCMOS33;
   
     but needs to solder some SMC resistors :-(
      * R34
      * R35
      * R21 (Optional for UART Activity LED)
      And even after that, not sure it will work: https://github.com/SymbiFlow/prjtrellis/issues/83
     -> ordered a small FTDI adapter on Amazon, and will plug it on
        another pair of balls / another USB port of the PC and this will do....
    
   PLL: (from prjtrellis/examples/soc_ecp5_evn/pll.v)
     Example for 50 MHz (according to README.md)
     How to compute parameters ?
   
   Doc: https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&ved=2ahUKEwiIjbWttZDqAhWRyoUKHSX9CTgQFjAAegQIAhAB&url=https%3A%2F%2Fwww.latticesemi.com%2F-%2Fmedia%2FLatticeSemi%2FDocuments%2FApplicationNotes%2FEH%2FTN1263.ashx%3Fdocument_id%3D50465&usg=AOvVaw2iwgALsO8Yms_AagS8baYt
   
   // I think that: output freq = 12 Mhz * CLKFB_DIV * (12 / CLKI_DIV) / CLKOP_DIV
   
module pll_12_50(input clki, output clko);
    (* ICP_CURRENT="12" *) (* LPF_RESISTOR="8" *) (* MFG_ENABLE_FILTEROPAMP="1" *) (* MFG_GMCREF_SEL="2" *)
    EHXPLLL #(
        .PLLRST_ENA("DISABLED"),
        .INTFB_WAKE("DISABLED"),
        .STDBY_ENABLE("DISABLED"),
        .DPHASE_SOURCE("DISABLED"),
        .CLKOP_FPHASE(0),
        .CLKOP_CPHASE(11),
        .OUTDIVIDER_MUXA("DIVA"),
        .CLKOP_ENABLE("ENABLED"),
        .CLKOP_DIV(12), // divide outplut clock
        .CLKFB_DIV(25), // divide feedback signal = multiply output clock
        .CLKI_DIV(6),   // reference clock divider  
        .FEEDBK_PATH("CLKOP")
    ) pll_i (
        .CLKI(clki),
        .CLKFB(clko),
        .CLKOP(clko),
        .RST(1'b0),
        .STDBY(1'b0),
        .PHASESEL0(1'b0),
        .PHASESEL1(1'b0),
        .PHASEDIR(1'b0),
        .PHASESTEP(1'b0),
        .PLLWAKESYNC(1'b0),
        .ENCLKOP(1'b0),
    );
endmodule
     
 
Links:
   Other attoSOC/picoRV32 project:
   https://github.com/emard/prjtrellis-picorv32/blob/master/README.md
   https://github.com/BracketMaster/ECP5-RISCV32-with-C-and-UART-Example   


FPGA specs:
   ECP5 5G
   85K LUTS
   DSP blocks: 18x18 mult (156 !!)
               How to assemble a 32x32 mult (hi and lo) from 18x18 mults ?
	       Probably not too difficult...
   DP16KD    : 208  (1.6 megs, is that correct ? maybe enough for
                     running some forme of muC Linux, but I'd rather 
		     wire some SDRAM)
		     3744 Kbits

======================================================

          TRELLIS_SLICE : LUTs, flipflops, etc..
             TRELLIS_IO
                   DCCA
                 DP16KD : BRAMs
             MULT18X18D : DSP blocks (multipliers)
                 ALU54B
                EHXPLLL : The PLL
                EXTREFB
                   DCUA
              PCSCLKDIV : Clock dividers for bus widening / narrowing
                IOLOGIC
               SIOLOGIC
                    GSR
                  JTAGG
                   OSCG : Oscillator (for timer, reset generator, not very accurate)
                  SEDGA
                    DTR
                USRMCLK
                CLKDIVF : Edge clock dividers
              ECLKSYNCB : Edge clock stop
                DLLDELD
                 DDRDLL
                DQSBUFM
        TRELLIS_ECLKBUF
           ECLKBRIDGECS : Edge clock bridge with clock select

======================================================
