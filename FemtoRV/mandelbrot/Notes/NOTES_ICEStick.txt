
ICEStick notes:
      
Pin numbers: (with Lattice logo *upside down*)

 J1 and J3:

    .------------------------------------------.....
    |J3: 3V 0V 62  61  60  56  48  47  45  44  
    |                                          
    |                                             
    |                                    I C E S T I C K        USB port here -->
    |
    |                                              
    |J1: 3V 0V 112 113 114 115 116 117 118 119 
    .------------------------------------------.....


 J2: 
                       .---------.
                 78    | 1    7  |  87
                 79    | 2    8  |  88
  <-- IR LEDs    80    | 3    9  |  90
                 81    | 4    10 |  91
                 GND   | 5    11 |  GND
                 +3.5V | 6    12 |  +3.5V
                       .---------.

 Other pins:
    12 MHz clock  : 21
    D1,D2,D3,D4,D5: 99,98,97,96,95
    UART          : TXD:8  RXD:9
  
 PLL: 
   SB_PLL40_CORE #(
      .FEEDBACK_PATH("SIMPLE"),
      .PLLOUT_SELECT("GENCLK"),
      .DIVR(4'b0000),
      //.DIVF(7'b0110100), .DIVQ(3'b011), // 80 MHz
      //.DIVF(7'b0110001), .DIVQ(3'b011), // 75 MHz
        .DIVF(7'b1001111), .DIVQ(3'b100), // 60 MHz
      //.DIVF(7'b0110100), .DIVQ(3'b100), // 40 MHz
      //.DIVF(7'b1001111), .DIVQ(3'b101), // 30 MHz
      .FILTER_RANGE(3'b001),
   ) pll (
      .REFERENCECLK(pclk),
      .PLLOUTCORE(clk),
      .RESETB(1'b1),
      .BYPASS(1'b0)
   );
  
   to find values of DIVF and DIVQ, use:
     icepll -o xxx
   where xxx is the desired frequency in MHz

 Links:
    ICE40 SB primitives:
       https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=2ahUKEwjAvfeWspDqAhVJxIUKHcNNC08QFjABegQIBRAB&url=http%3A%2F%2Fwww.latticesemi.com%2F~%2Fmedia%2FLatticeSemi%2FDocuments%2FTechnicalBriefs%2FSBTICETechnologyLibrary201504.pdf&usg=AOvVaw3ZlbrCl8sUbwcM-SSLjMRQ
    J1,A small processor + Forth interpreter that fits on the ICEStick:
       https://github.com/jamesbowman/swapforth
    (borrowed some ideas, and their UART)
    
BRAMS:
  16 blocs of 4KB = 8KB = 2Kwords (32-bit words).
  
SPI Flash:
   https://www.digikey.fr/product-detail/fr/micron-technology-inc/N25Q032A13ESC40F-TR/557-1696-2-ND/4072513
   32 Mbits, 108 MHz -> 4 Mbytes -> 1 MWord. If I manage to execute code from there, that makes a lot of
   room for the code !
   * FPGA configuration only uses approx. 32K (and yes, femtosoc.bin weights 32K)
   * From ICEStick schematics, seems that only one line for MOSI/MISO is wired, I wonder
     whether dual output / quad output are possible (maybe dual output, since one of the
     pins seems to be reversible, but probaby not quad output, since only two pins seem to
     be wired). -> dual output: yes   quad output: no
   * Maybe we can switch to high speed SPI
   * DDR mode does not seem to be supported (did not see mention of it in spec sheet)
   * Even if I don't manage to execute code from there, maybe we can put font data in the SPI Flash.
   * https://www.winbond.com/resource-files/w25q32jw%20spi%20revf%2009042018.pdf

   * Read instructions:
   
       Read data (03h) -> implemented
           Read 1 word will take:
	       03h                       :  8 cycles
	       send address              : 24 cycles
	       read word                 : 32 cycles
	       total                     : 64 cycles
	       
       Fast read (0Bh) -> address + 8 dummy clocks, then data comes
               0Bh                       : 8 fast cycles
               send address + dummy bytes: 32 fast cycles
	       read word                 : 32 fast cycles
	       total                     : 72 fast cycles (equivalent to 36 cycles)


       Fast read dual output (3Bh)
               3Bh                       : 8 fast cycles
	       send address + dummy bytes: 32 fast cycles
               read word                 : 16 fast cycles
	       total                     : 56 fast cycles (equivalent to 28 cycles)

       Fast read dual IO (BBh)
               BBh                       : 8 fast cycles
	       send address + dummy bytes: 16 fast cycles
	       read word                 : 16 fast cycles
	       total                     : 40 fast cycles (equivalent to 20 cycles)

      XIP mode: (eXecute In Place) no need to send command, just send address.
         Activate XIP mode:
	    1) set volatile configuration register bit 3 to 0 -> unsure it is needed (to be checked),
	       depends on part number. Anyway, number of dummy bits needs to be specified...
	    2) drive the XIP confirmation bit to 0 during the next fast read operation (the XIP confirmation
	       bit is the first dummy bit, 0 = confirm XIP)

       -> Fast read dual IO will take 32 fast cycles (equivalent to 16 cycles)

      Execution from SPI ram will be super-slow... Best possibility is 16 cycles (but at 108 MHz)
      
      ... unless I have an instruction cache, but this sounds complicated to fit
      on the icestick.
      
      Is it possible to tag functions / variables to assign them to either slow SPI
      ROM or fast BRAM ? In asm yes, but in C ?  ---> YES


